/**
 * @warning this file requires `themeColors.config.js` to export {shades, colors, globalColors}
 * @warning overwrites tailwind.config.js `tailwindConfig.theme.extend.colors`
 * @warning assets/base.css
 */

const fs = require("fs");
const path = require("path");
const prettier = require("prettier");
const Color = require("color");
const colorConfig = require("./themeColors.config");

const colorMethods = {
  lighten: (val) => (col) => new Color(col).lighten(val).hex(),
  darken: (val) => (col) => new Color(col).darken(val).hex(),
  alpha: (val) => (col) => new Color(col).alpha(val).toString(),
};

const { colors, globalColors } = colorConfig;
const shades = colorConfig.shades.reduce((acc, cur) => {
  return {
    ...acc,
    [cur.key]: colorMethods[cur.action](cur.value),
  };
}, {});

const cssGenerated =
  // main colors css code
  Object.keys(colors).reduce((acc, key) => {
    let result = acc;
    result += `--${key}: ${colors[key]};\n`;
    Object.keys(shades).forEach((shadeKey) => {
      result += `--${key}-${shadeKey}: ${shades[shadeKey](colors[key])};\n`;
    });
    return result;
  }, "") +
  // global colors css code
  Object.keys(globalColors).reduce((acc, key) => {
    let result = acc;
    result += `--${key}: var(--${globalColors[key]});\n`;
    Object.keys(shades).forEach((shadeKey) => {
      result += `--${key}-${shadeKey}: var(--${globalColors[key]}-${shadeKey});\n`;
    });
    return result;
  }, "") +
  // gradient css code
  Object.keys(colorConfig.gradients).reduce((acc, key) => {
    let result = acc;
    result += `--${key}: ${colorConfig.gradients[key]};\n`;
    return result;
  }, "");

const baseCSS = fs
  .readFileSync(path.join(process.cwd(), "assets", "base.css"))
  .toString("utf-8");
console.log("writing color variables into `base.css`...");
fs.writeFileSync(
  path.join(process.cwd(), "assets", "base.css"),
  prettier.format(
    // replace variables between the two comments
    baseCSS.replace(
      /\/\*===\*\/(.|\n)*\/\*===\*\//,
      "/*===*/" + "\n" + cssGenerated + "/*===*/"
    ),
    { parser: "css" }
  )
);

const tailwindGenerated = {
  // main and global colors
  ...Object.keys({ ...colors, ...globalColors }).reduce((acc, cur) => {
    let result = {
      [cur]: { DEFAULT: `var(--${cur})` },
    };
    Object.keys(shades).forEach((shadeKey) => {
      result[cur][shadeKey] = `var(--${cur}-${shadeKey})`;
    });
    return {
      ...acc,
      ...result,
    };
  }, {}),
  // gradients colors
  ...Object.keys(colorConfig.gradients).reduce(
    (acc, cur) => ({
      ...acc,
      [cur]: `var(--${cur})`,
    }),
    {}
  ),
};

console.log("writing colors on `tailwind.config.js`...");
const tailwindConfig = require("../tailwind.config");
tailwindConfig.theme.extend.colors = tailwindGenerated;
fs.writeFileSync(
  path.join(process.cwd(), "tailwind.config.js"),
  prettier.format(
    `
    /*
    * \`tailwindConfig.theme.extend.colors\`
    * is generated by \`generate-colors.js\`
    */

    module.exports = ${JSON.stringify(tailwindConfig, null, 2)}
  `,
    { parser: "babel" }
  )
);

const allColorsObject = Object.keys({
  ...colorConfig.colors,
  ...colorConfig.globalColors,
}).reduce((acc, cur) => {
  return {
    ...acc,
    ...colorConfig.shades.reduce(
      (accShades, curShades) => ({
        ...accShades,
        [`${cur}-${curShades.key}`]: "",
      }),
      { [cur]: "" }
    ),
  };
}, {});

console.log("writing colors as types in `theme-colors.ts`...");
fs.writeFileSync(
  path.join(process.cwd(), "theme", "theme-colors.ts"),
  prettier.format(
    `/*
     * Auto generated from generate-colors.js, dont touch
     */
    export type ThemeMainColors = keyof ${JSON.stringify({
      ...colorConfig.colors,
      ...colorConfig.globalColors,
      ...colorConfig.gradients,
    })};

    export type ThemeAllColors = keyof ${JSON.stringify(allColorsObject)};
    `,
    { parser: "typescript" }
  )
);
